android为我们提供了ContentProvider来实现数据的共享, 一套标准及统一的接口和这个程序里的数据打交道，如：添加(insert)、删除(delete)、查询(query)、修改(update)。
 
定义自己的 ContentProvider，需在AndroidManifest.xml中注册，其他application可以通过获取 ContentResolver通过Uri来操作上一程序的数据。可用ContentResolver通过Uri来操作不同表的数据。

 什么是URI?
 将其分为A，B，C，D 4个部分：
 A：标准前缀，用来说明一个Content Provider控制这些数据，无法改变;"content://"
 B：URI的标识，它定义了是哪个Content Provider提供这些数据。对于第三方应用程序，为了保证URI标识的唯一性，它必须是一个完整的、小写的 类名。这个标识在 元素的 authorities属性中说明：一般是定义该ContentProvider的包.类的名称 ;"content://hx.android.text.myprovider"
 C：路径，要操作的数据库中表的名字，或者你也可以自己定义，记得在使用的时候保持一致就ok了;"content://hx.android.text.myprovider/tablename"
 D：如果URI中包含表示需要获取的记录的ID;则就返回该id对应的数据，如果没有ID，就表示返回全部; "content://hx.android.text.myprovider/tablename/#" 
#表示数据id
 
 UriMatcher：用于匹配Uri，它的用法如下：
 1.首先把你需要匹配Uri路径全部给注册上，
如下： //常量UriMatcher.NO_MATCH表示不匹配任何路径的返回码(-1)。 

UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH); 
//如果match()方法匹配content://com.changcheng.sqlite.provider.contactprovider/contact路径，返回匹配码为1 
uriMatcher.addURI(“com.changcheng.sqlite.provider.contactprovider”, “contact”, 1);

 1);//添加需要匹配uri，如果匹配就会返回匹配码 //如果match()方法匹配 content://com.changcheng.sqlite.provider.contactprovider/contact/230路径，返回匹配码为2 
uriMatcher.addURI(“com.changcheng.sqlite.provider.contactprovider”, “contact/#”, 2);//#号为通配符 
 
2.注册完需要匹配的Uri后，就可以使用uriMatcher.match(uri)方法对输入的Uri进行匹配，如果匹配就返回匹配码，匹配码是调用 addURI()方法传入的第三个参数，假设匹配 content://com.changcheng.sqlite.provider.contactprovider/contact路径，返回的匹配码为1。
 ContentUris：用于获取Uri路径后面的ID部分，它有两个比较实用的方法：
 ・ withAppendedId(uri, id)用于为路径加上ID部分
 ・ parseId(uri)方法用于从路径中获取ID部分
  
数据写入的同步，在AndroidManifest.XML中定义ContentProvider的时候，需要考虑是元素multiprocess属性的值;另外一方面Android在ContentResolver中提供了notifyChange() 接口，在数据改变时会通知其他ContentObserver，这个地方应该使用了观察者模式，可赋予权限。

上述来源:

较好学习例子：http://blog.csdn.net/luoshengyang/article/details/6950440

